# -*- coding: utf-8 -*-
"""Titanic Survival Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ueJpuBODoe5sJceB0Ry8D4JdrFnvw0mt

Titanic Survival Prediction Using Machine Lerning
"""

# importing essential Dependecies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Data collection and Processing
titanic_data = pd.read_csv('/content/train.csv')

# print first five rrows
titanic_data.head(5)

# Printing last five
titanic_data.tail(5)

# No of rows and coloms
titanic_data.shape

# Getting some info about the data
titanic_data.info()

# Check the Number of missing values in each colonms
titanic_data.isnull().sum()

# Handiling the Missing data
# Drop the 'Cabin' from the data
titanic_data = titanic_data.drop(columns='Cabin', axis=1)

# Lokking the new data
titanic_data.head(5)

# Replacing the missing value in "Age" with the mean
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)

# Finding the mode value of "Embarked" column
print(titanic_data['Embarked'].mode())

# Replacing the missing values in the "Embarked" column
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0],inplace=True)

# Ckecking the replacing is succesfull or not
titanic_data.isnull().sum()

# Data analysing
# Getting some statistical measures about the data
titanic_data.describe()

# Finding the no of people survived and not survivied
titanic_data['Survived'].value_counts()

# Data visualization
sns.set()

# Making a count plot for "Survived" column
sns.countplot(data=titanic_data, x='Survived')

# Exat no of survivers based on Sex

titanic_data['Sex'].value_counts()

# Making a count plot for "Sex" column
sns.countplot(x='Sex', data=titanic_data)

# No of Survivers Genderwise
sns.countplot(x='Sex', hue='Survived', data=titanic_data)

No of people survuived based on Pclass
sns.countplot(x='Pclass', hue='Survived', data=titanic_data)

# Encoding the catagorical colums
titanic_data['Sex'].value_counts()
titanic_data['Embarked'].value_counts()

# Converting catogorical colum
titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head(5)

# Seperating Feautures and Target
X = titanic_data.drop(columns = ['PassengerId','Name','Ticket','Survived'],axis=1)
Y = titanic_data['Survived']

print(X)

print(Y)

# Splitting the data into traing data and testing data
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

print(Y.shape, Y_train.shape, Y_test.shape)

# MOdel Training
# Logistic Regression
model = LogisticRegression()

# Trining the logistic Regression Model
model_fit = model.fit(X_train, Y_train)

# Model evaluation
# Accuracy Score
x_train_prediction = model.predict(X_train)
print(x_train_prediction)

triningdata_accuracy = accuracy_score(Y_train, x_train_prediction)
print('Accuracy score of training data : ', triningdata_accuracy)

# accuracy on test data
x_train_prediction = model.predict(X_test)
print(x_train_prediction)

testdata_accuracy = accuracy_score(Y_test, x_train_prediction)
print('Accuracy score of test data : ', testdata_accuracy)

