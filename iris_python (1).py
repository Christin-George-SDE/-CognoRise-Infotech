# -*- coding: utf-8 -*-
"""iris.python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m8wToP1G7k-s_yaZ8kvsFfG2fUUP9bW5
"""

# Commented out IPython magic to ensure Python compatibility.
#IMPORTING ALL THE ESSENTIAL LIBRARIES FOR OUR PROJECT

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
# %matplotlib inline

"""LOADING THE RAW DATA SET"""

columns = ['Sepal lengths','Sepal width', 'Petal length', 'Petal width', 'Class_labels']
#load the data

df = pd.read_csv('IRIS.csv',names=columns)
df.head(150)

"""VISUALIZATION OF OUR DATASET"""

df.describe()

sns.pairplot(df, hue='Class_labels')

"""SEPERATE INPUT COLOMS AND OUTPUT COLOMS"""

# seperate features and target
data = df.values
X = data[:,0:4]
Y = data[:,4]
print(X)
print(Y)

"""SPLITING DTA INTO TRAINING AND TESTING"""

# Split the data  to train data and test data
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)

"""MODEL 1: Support vector machine algorithm"""

# Support vector machine algorithm

from sklearn.svm import SVC

model_svc = SVC()
model_svc.fit(X_train, Y_train)

Prediction1 = model_svc.predict(X_test)
#Calculate the accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test,Prediction1)*100)
for i in range(len(Prediction1)):
    print(Y_test[i],Prediction1[i])

"""MODEL 2 : LOGISTIC REGRESSION"""

# logistic regression model
from sklearn.linear_model import LogisticRegression
model_Lr = LogisticRegression()
model_Lr.fit(X_train, Y_train)

Prediction2 = model_Lr.predict(X_test)
#Calculate the accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test,Prediction2)*100)
for i in range(len(Prediction2)):
    print(Y_test[i],Prediction2[i])

"""MODEL 3 : DECISION TREE CLASSIFILER"""

# DECISION TREE CLASSIFIER
from sklearn.tree import DecisionTreeClassifier
model_DTC= DecisionTreeClassifier()
model_DTC.fit(X_train, Y_train)

prediction3 = model_svc.predict(X_test)
# calculate the accurecy
from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test,prediction3)*100)

# A Detailed classification report
from sklearn.metrics import classification_report
print(classification_report(Y_test, Prediction2))